// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "user",
    columns: [
      { name: "name", type: "text" },
      { name: "email", type: "text" },
      { name: "emailVerified", type: "bool" },
      { name: "image", type: "text" },
    ],
    revLinks: [
      { column: "userId", table: "session" },
      { column: "userId", table: "account" },
    ],
  },
  {
    name: "session",
    columns: [
      { name: "userId", type: "link", link: { table: "user" } },
      { name: "token", type: "text" },
      { name: "expiresAt", type: "datetime" },
      { name: "ipAddress", type: "text" },
      { name: "userAgent", type: "text" },
    ],
  },
  {
    name: "account",
    columns: [
      { name: "userId", type: "link", link: { table: "user" } },
      { name: "accountId", type: "text" },
      { name: "providerId", type: "text" },
      { name: "accessToken", type: "text" },
      { name: "refreshToken", type: "text" },
      { name: "accessTokenExpiresAt", type: "datetime" },
      { name: "refreshTokenExpiresAt", type: "datetime" },
      { name: "scope", type: "text" },
      { name: "idToken", type: "text" },
      { name: "password", type: "text" },
    ],
  },
  {
    name: "verification",
    columns: [
      { name: "identifier", type: "text" },
      { name: "value", type: "text" },
      { name: "expiresAt", type: "datetime" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type Session = InferredTypes["session"];
export type SessionRecord = Session & XataRecord;

export type Account = InferredTypes["account"];
export type AccountRecord = Account & XataRecord;

export type Verification = InferredTypes["verification"];
export type VerificationRecord = Verification & XataRecord;

export type DatabaseSchema = {
  user: UserRecord;
  session: SessionRecord;
  account: AccountRecord;
  verification: VerificationRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://angedell-s-workspace-24qeiq.us-east-1.xata.sh/db/ny-citibike-tanstack",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
